Multi Threading in java:
    * It is used to run many processes concurrently with the same processor.

Thread t = new Thread();
t.start();

By the above line a new thread is created with its own call stack.
Here the thread won't do any thing, it will die as soon as it is created.
Because it is not having any job


Whenever a new thread is created the methods will be put at the bottom of the stack for execution


Launching a new thread using Runnable interface:
    * Create a class that implements Runnable interface
        class MyRunnable1 implements Runnable{
            @Override
            public void run() {
                for(int i=0;i<100;i++){
                    System.out.println("Thread 1 "+i);
                }
            }
        }
    * Pass the instance of MyRunnable1 to the Thread class constructor
        Runnable runnable1 = new MyRunnable1();
        Thread thread1 = new Thread(runnable1);

    * Start the thread by using
        thread1.start();


Worker has a work
Thread has a runnable

Here think of runnable as the work that need to be done by the thread class


The three states of a thread
    1. New -> Created but not yet started
    2. Runnable -> Ready to do the work
    3. Running -> Running state

There is also another state that is dead the thread reaches the dead state when it is finished running the run() method
